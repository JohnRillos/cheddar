{"version":3,"sources":["modules/Bookmarker.js","components/BookmarksPanel/index.js","modules/FileHandler.js","components/StoragePanel/index.js","modules/FormActionHandler.js","components/SimpleButton/index.js","components/ErrorBanner/index.js","components/SceneForm/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["getBookmarkedSceneIds","ls","get","demo","bookmarkedSceneIds","getBookmarkedScenes","bookmarkedIds","allScenes","map","id","filter","Boolean","addBookmark","sceneId","Set","add","set","Array","from","removeBookmark","delete","BookmarksPanel","props","renderControls","className","type","isPermanent","onClick","currentSceneId","renderBookmark","scene","changeScene","key","sceneName","render","bookmarkedScenes","includes","this","Component","getExportBlob","json","editorVersion","version","itemNames","localStorageMap","forEach","name","LocalStorage","getLocalStorageItems","Blob","JSON","stringify","StoragePanel","renderButton","label","action","style","FileSaver","saveAs","clear","require","submitSceneForm","sceneFormInput","updatedScenes","console","info","getScene","localScenes","scenes","Error","SimpleButton","getFontWeight","text","length","getDisabled","disabled","styles","ErrorBanner","message","buildField","displayName","fieldName","isTextArea","component","buildChoiceArray","arrayHelpers","push","nextScene","form","values","choices","field","index","arrayName","remove","buildChoice","SceneForm","state","loaded","error","undefined","setState","initialValues","enableReinitialize","initialStatus","savedValues","onSubmit","setSubmitting","setStatus","setTimeout","FormActionHandler","isSubmitting","status","Footer","App","nextSceneId","Bookmarker","refreshBookmarks","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b68ec87a.chunk.js","sourcesContent":["import ls from 'local-storage';\r\nimport demo from '../dev/demo.json';\r\n\r\nfunction getBookmarkedSceneIds() {\r\n  return ls.get(\"bookmarkedSceneIds\") || demo.bookmarkedSceneIds;\r\n}\r\n\r\nfunction getBookmarkedScenes() {\r\n  const bookmarkedIds = getBookmarkedSceneIds();\r\n  const allScenes = ls.get(\"scenes\") || {};\r\n  const bookmarkedScenes = bookmarkedIds.map(id => allScenes[id]).filter(Boolean);\r\n  return bookmarkedScenes;\r\n}\r\n\r\nfunction addBookmark(sceneId) {\r\n  const bookmarkedIds = new Set(getBookmarkedSceneIds());\r\n  bookmarkedIds.add(sceneId);\r\n  ls.set(\"bookmarkedSceneIds\", Array.from(bookmarkedIds));\r\n}\r\n\r\nfunction removeBookmark(sceneId) {\r\n  const bookmarkedIds = new Set(getBookmarkedSceneIds());\r\n  bookmarkedIds.delete(sceneId);\r\n  ls.set(\"bookmarkedSceneIds\", Array.from(bookmarkedIds));\r\n}\r\n\r\nexport default { getBookmarkedScenes, addBookmark, removeBookmark }","import React, { Component } from 'react';\r\nimport './styles.scss';\r\nimport Bookmarker from '../../modules/Bookmarker';\r\n\r\nclass BookmarksPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  isPermanent() {\r\n    return ['start', 'end'].includes(this.props.currentSceneId);\r\n  }\r\n\r\n  renderControls = () => (\r\n    <div className=\"button-row\">\r\n      <button\r\n        type=\"button\"\r\n        className={`control-button ${this.isPermanent() ? 'disabled-hover' : 'danger'}`}\r\n        onClick={() => this.isPermanent() ? {} : this.props.removeBookmark(this.props.currentSceneId)}\r\n      >\r\n        -\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className='control-button'\r\n        onClick={() => this.props.addBookmark(this.props.currentSceneId)}\r\n      >\r\n        +\r\n      </button>\r\n    </div>\r\n  )\r\n\r\n  renderBookmark = (scene) => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"control-button\"\r\n      onClick={() => this.props.changeScene(scene.id)}\r\n      key={scene.sceneName}\r\n    >\r\n      {scene.sceneName}\r\n    </button>\r\n  )\r\n\r\n  render = () => (\r\n    <div className=\"panel\">\r\n      <div className=\"title\">Bookmarks</div>\r\n      {this.renderControls()}\r\n      {this.props.bookmarkedScenes.map(this.renderBookmark)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BookmarksPanel;","import FileSaver from 'file-saver';\r\nimport LocalStorage from 'local-storage';\r\nimport { version } from '../../package.json';\r\n\r\nfunction getLocalStorageItems(itemNames = []) {\r\n  const localStorageMap = {};\r\n  itemNames.forEach(name => localStorageMap[name] = LocalStorage.get(name));\r\n  return localStorageMap;\r\n}\r\n\r\nfunction toBlob(json) {\r\n  return new Blob([JSON.stringify(json, null, 2)], { type: \"text/plain;charset=utf-8\" })\r\n}\r\n\r\nfunction getExportBlob() {\r\n  return toBlob({\r\n    editorVersion: version,\r\n    ...getLocalStorageItems(['bookmarkedSceneIds', 'scenes'])\r\n  });\r\n}\r\n\r\nfunction exportProject() {\r\n  FileSaver.saveAs(getExportBlob(), \"cheddar-project.json\");\r\n}\r\n\r\nexport { exportProject }","import React, { Component } from 'react';\r\nimport './styles.scss';\r\nimport ls from 'local-storage';\r\nimport { exportProject } from '../../modules/FileHandler';\r\n\r\nclass StoragePanel extends Component {\r\n  renderButton = (label, action, style) => (\r\n    <button\r\n      type=\"button\"\r\n      className={`control-button ${style}`}\r\n      onClick={action}\r\n      key={label}\r\n    >\r\n      {label}\r\n    </button>\r\n  )\r\n\r\n  render = () => (\r\n    <div className=\"panel\">\r\n      <div className=\"title\">Data</div>\r\n      {this.renderButton('Export to File', () => exportProject())}\r\n      {this.renderButton('Reset', () => ls.clear(), 'danger')}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StoragePanel;","const LocalStorage = require('local-storage');\r\nconst demo = require('../dev/demo.json');\r\n\r\nfunction submitSceneForm(sceneFormInput) {\r\n  const currentSceneId = sceneFormInput.id;\r\n  const localScenes = LocalStorage.get('scenes');\r\n  const updatedScenes = {\r\n    ...localScenes,\r\n    [currentSceneId]: sceneFormInput\r\n  }\r\n  LocalStorage.set('scenes', updatedScenes);\r\n  console.info(`Submitted scene \"${sceneFormInput.sceneName}\"`);\r\n}\r\n\r\nfunction getScene(sceneId = 'start') {\r\n  const localScenes = LocalStorage.get('scenes');\r\n  if (!localScenes) {\r\n    LocalStorage.set('scenes', demo.scenes);\r\n    return demo.scenes['start'];\r\n  }\r\n  if (localScenes && localScenes[sceneId]) {\r\n    return localScenes[sceneId];\r\n  }\r\n  throw new Error(`Scene '${sceneId}' not found!`);\r\n}\r\n\r\nexport default { submitSceneForm, getScene };","import React, { Component } from 'react';\r\nimport \"./styles.scss\"\r\n\r\nclass SimpleButton extends Component {\r\n  getFontWeight = () => {\r\n    return this.props.text.length === 1 ? \"bold\" : null;\r\n  }\r\n\r\n  getDisabled = () => {\r\n    return this.props.disabled ? \"disabled\" : null;\r\n  }\r\n\r\n  render = () => (\r\n    <button\r\n      type={this.props.type || \"button\"}\r\n      className={`button ${this.getFontWeight()} ${this.getDisabled()} ${this.props.styles}`} \r\n      onClick={this.props.onClick}\r\n    >\r\n      {this.props.text}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default SimpleButton;","import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass ErrorBanner extends Component {\r\n  render = () => (\r\n    <div className=\"ErrorBanner\">{this.props.message}</div>\r\n  )\r\n}\r\n\r\nexport default ErrorBanner;","import React, { Component } from 'react';\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  // ErrorMessage, \r\n  FieldArray\r\n} from 'formik';\r\nimport FormActionHandler from '../../modules/FormActionHandler';\r\nimport SimpleButton from '../SimpleButton';\r\nimport ErrorBanner from '../ErrorBanner';\r\nimport './styles.css';\r\n\r\nconst buildField = (displayName, fieldName, isTextArea) => (\r\n  <div className=\"namedField\">\r\n    <div>{`${displayName}: `}</div>\r\n    <Field className=\"field\" name={fieldName} component={isTextArea ? 'textarea' : 'input'} />\r\n  </div>\r\n)\r\n\r\nconst buildChoice = (arrayHelpers, index, arrayName) => (\r\n  <div className=\"choice\" key={index}>\r\n    <div className=\"choiceHeader\">\r\n      {`Choice ${index + 1}: `}\r\n      <SimpleButton styles=\"red\" onClick={() => arrayHelpers.remove(index)} text=\"-\" />\r\n    </div>\r\n    {buildField(\"Text\", `${arrayName}.${index}.text`, true)}\r\n    {buildField(\"Next Scene\", `${arrayName}.${index}.nextScene`)}\r\n  </div>\r\n)\r\n\r\nconst buildChoiceArray = () => (\r\n  <FieldArray\r\n    name=\"choices\"\r\n    render={arrayHelpers => (\r\n      <div>\r\n        <div className=\"choicesSectionHeader\">\r\n          <div className=\"sectionHeaderLabel\">Choices</div>\r\n          <SimpleButton onClick={() => arrayHelpers.push({ text: '', nextScene: '' })} text=\"+\" />\r\n        </div>\r\n        {(arrayHelpers.form.values.choices || []).map((field, index) => (\r\n          buildChoice(arrayHelpers, index, \"choices\")\r\n        ))}\r\n      </div>\r\n    )}\r\n  />\r\n)\r\n\r\nclass SceneForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loaded: false,\r\n      error: undefined,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      return this.setState({\r\n        loaded: true\r\n      });\r\n    } catch (error) {\r\n      return this.setState({ error })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorBanner message={this.state.error.message} />\r\n    }\r\n    if (!this.state.loaded) {\r\n      return null;\r\n    }\r\n    return <div className='formContainer'>\r\n      <Formik\r\n        initialValues={this.props.initialValues}\r\n        //   validate={values => {\r\n        //     let errors = {};\r\n        //     if (!values.email) {\r\n        //       errors.email = 'Required';\r\n        //     } else if (\r\n        //       !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        //     ) {\r\n        //       errors.email = 'Invalid email address';\r\n        //     }\r\n        //     return errors;\r\n        //   }}\r\n        enableReinitialize\r\n        initialStatus={{ savedValues: this.props.initialValues }}\r\n        onSubmit={(values, { setSubmitting, setStatus }) => {\r\n          setTimeout(() => {\r\n            FormActionHandler.submitSceneForm(values);\r\n            setSubmitting(false);\r\n            setStatus({ savedValues: values });\r\n          }, 400);\r\n        }}\r\n      >\r\n        {(props) => (\r\n          <Form className=\"form\">\r\n            <div className=\"fieldSections\">\r\n              <div className=\"column\">\r\n                {buildField(\"Scene Name\", \"sceneName\")}\r\n                {buildField(\"Top Text\", \"topText\", true)}\r\n                {buildField(\"Image\", \"imageFile\")}\r\n                {buildField(\"Bottom Text\", \"bottomText\", true)}\r\n              </div>\r\n              <div className=\"column\">\r\n                {buildChoiceArray()}\r\n              </div>\r\n            </div>\r\n            <div className=\"row-right\">\r\n              <SimpleButton\r\n                styles=\"big\"\r\n                type=\"submit\"\r\n                disabled={props.isSubmitting || (props.status.savedValues === props.values)}\r\n                text=\"Save Scene\"\r\n              />\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default SceneForm;","import React from 'react';\r\nimport { version } from '../../../package.json';\r\nimport './styles.css';\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer\">\r\n    {version}\r\n  </div>\r\n)\r\n\r\nexport default Footer","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport BookmarksPanel from './components/BookmarksPanel';\r\nimport StoragePanel from './components/StoragePanel';\r\nimport SceneForm from './components/SceneForm';\r\nimport Footer from './components/Footer';\r\nimport FormActionHandler from './modules/FormActionHandler';\r\nimport Bookmarker from './modules/Bookmarker';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentSceneId: undefined,\r\n      bookmarkedScenes: []\r\n    }\r\n  }\r\n\r\n  changeScene(nextSceneId) {\r\n    return this.setState({\r\n      currentSceneId: nextSceneId,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    return this.setState({\r\n      bookmarkedScenes: Bookmarker.getBookmarkedScenes()\r\n    });\r\n  }\r\n\r\n  refreshBookmarks() {\r\n    this.setState({\r\n      bookmarkedScenes: Bookmarker.getBookmarkedScenes()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-h1\">Cheddar</h1>\r\n          <p className=\"App-p\">Choose Your Own Adventure Editor</p>\r\n        </header>\r\n        <div className=\"main-row\">\r\n          <div className=\"left-panel\">\r\n            <BookmarksPanel\r\n              bookmarkedScenes={this.state.bookmarkedScenes}\r\n              currentSceneId={this.state.currentSceneId || 'start'}\r\n              changeScene={(id) => this.changeScene(id)}\r\n              addBookmark={(id) => {\r\n                Bookmarker.addBookmark(id);\r\n                this.refreshBookmarks();\r\n              }}\r\n              removeBookmark={(id) => {\r\n                Bookmarker.removeBookmark(id);\r\n                this.refreshBookmarks();\r\n              }}\r\n            />\r\n          </div>\r\n          <SceneForm\r\n            initialValues={FormActionHandler.getScene(this.state.currentSceneId)}\r\n          />\r\n          <div className=\"right-panel\">\r\n            <StoragePanel/>\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}