{"version":3,"sources":["modules/FormActionHandler.js","components/SimpleButton/index.js","components/ErrorBanner/index.js","modules/FileHandler.js","components/SceneForm/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["LocalStorage","require","demo","getScene","sceneId","localScenes","get","console","log","scenes","Error","submitSceneForm","sceneFormInput","currentSceneId","id","updatedScenes","set","alert","sceneName","loadScene","scene","SimpleButton","getFontWeight","props","text","length","render","type","className","styles","onClick","Component","ErrorBanner","message","saveFile","fileName","FileSaver","saveAs","localItemName","jsonString","JSON","stringify","Blob","getBlob","buildField","displayName","fieldName","isTextArea","name","component","buildChoiceArray","arrayHelpers","push","nextScene","form","values","choices","map","field","index","arrayName","key","remove","buildChoice","SceneForm","state","initialValues","loaded","error","undefined","FormActionHandler","this","setState","onSubmit","setSubmitting","setTimeout","isSubmitting","disabled","Footer","version","App","ls","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g/BAAA,IAAMA,EAAeC,EAAQ,GACvBC,EAAOD,EAAQ,IAerB,SAASE,EAASC,GAChB,IAAMC,EAAcL,EAAaM,IAAI,UAGrC,GAFAC,QAAQC,IAAI,UAAWH,GACvBE,QAAQC,IAAI,UAAWJ,IAClBA,EACH,OAAOF,EAAKO,OAAO,GAErB,GAAIJ,GAAeA,EAAYD,GAC7B,OAAOC,EAAYD,GAErB,MAAM,IAAIM,MAAJ,iBAAoBN,EAApB,iBASO,OAAEO,gBAhCjB,SAAyBC,GACvBL,QAAQC,IAAI,iBAAkBI,GAC9B,IAAMC,EAAiBD,EAAeE,GAEhCC,E,yVAAa,IADCf,EAAaM,IAAI,UAClB,eAEhBO,EAAiBD,IAEpBZ,EAAagB,IAAI,SAAUD,GAE3BE,MAAM,oBAAD,OAAqBL,EAAeM,UAApC,OAsB2Bf,WAAUgB,UAN5C,SAAmBf,GACjB,IAAMgB,EAAQjB,EAASC,GAEvB,OADAJ,EAAagB,IAAI,iBAAkBI,EAAMN,IAClCM,ICdMC,G,iNAdbC,cAAgB,WACd,OAAkC,IAA3B,EAAKC,MAAMC,KAAKC,OAAe,OAAS,M,EAGjDC,OAAS,kBACP,4BACEC,KAAM,EAAKJ,MAAMI,MAAQ,SACzBC,UAAS,iBAAY,EAAKN,gBAAjB,YAAoC,EAAKC,MAAMM,QAAUC,QAAS,EAAKP,MAAMO,SAErF,EAAKP,MAAMC,O,6BAVSO,cCUZC,G,kBATb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAGRG,OAAS,kBACP,yBAAKE,UAAU,eAAe,EAAKL,MAAMU,UALxB,E,2BADKF,c,yBCK1B,SAASG,EAASC,GAChBC,IAAUC,OANZ,SAAiBC,GACf,IAAMC,EAAaC,KAAKC,UAAUzC,IAAaM,IAAIgC,GAAgB,KAAM,GACzE,OAAO,IAAII,KAAK,CAACH,GAAa,CAAEZ,KAAM,6BAIrBgB,CAAQ,UAAWR,GCMtC,IAAMS,EAAa,SAACC,EAAaC,EAAWC,GAAzB,OACjB,yBAAKnB,UAAU,cACb,uCAASiB,EAAT,OACA,kBAAC,IAAD,CAAOjB,UAAU,QAAQoB,KAAMF,EAAWG,UAAWF,EAAa,WAAa,YAe7EG,EAAmB,kBACvB,kBAAC,IAAD,CACEF,KAAK,UACLtB,OAAQ,SAAAyB,GAAY,OAClB,6BACE,yBAAKvB,UAAU,wBACb,wCACA,kBAAC,EAAD,CAAcE,QAAS,kBAAMqB,EAAaC,KAAK,CAAE5B,KAAM,GAAI6B,UAAW,MAAO7B,KAAK,QAElF2B,EAAaG,KAAKC,OAAOC,SAAW,IAAIC,KAAI,SAACC,EAAOC,GAAR,OApBlC,SAACR,EAAcQ,EAAOC,GAAtB,OAClB,yBAAKhC,UAAU,SAASiC,IAAKF,GAC3B,yBAAK/B,UAAU,gBAAf,iBACa+B,EAAQ,EADrB,MAEE,kBAAC,EAAD,CAAc9B,OAAO,MAAMC,QAAS,kBAAMqB,EAAaW,OAAOH,IAAQnC,KAAK,OAE5EoB,EAAW,OAAD,UAAYgB,EAAZ,YAAyBD,EAAzB,UAAuC,GACjDf,EAAW,aAAD,UAAkBgB,EAAlB,YAA+BD,EAA/B,gBAcLI,CAAYZ,EAAcQ,EAAO,mBAyF5BK,E,YAjFb,WAAYzC,GAAQ,IAAD,8BACjB,4CAAMA,KACD0C,MAAQ,CACXpD,eAAgB,EAAKU,MAAMnB,QAC3B8D,cAAe,GACfC,QAAQ,EACRC,WAAOC,GANQ,E,iFAWjB,IACE,IAAMjD,EAAQkD,EAAkBnD,UAAUoD,KAAKN,MAAMpD,gBAErD,OADAN,QAAQC,IAAI,QAASY,GACdmD,KAAKC,SAAS,CACnB3D,eAAgBO,EAAMN,GACtBoD,cAAe9C,EACf+C,QAAQ,IAEV,MAAOC,GACP,OAAOG,KAAKC,SAAS,CAAEJ,a,+BAKzB,OAAIG,KAAKN,MAAMG,MAEN,kBAAC,EAAD,CAAanC,QAASsC,KAAKN,MAAMG,MAAMnC,UAE3CsC,KAAKN,MAAME,OAGT,yBAAKvC,UAAU,iBACpB,kBAAC,IAAD,CACEsC,cAAeK,KAAKN,MAAMC,cAY1BO,SAAU,SAAClB,EAAD,GAAgC,IAArBmB,EAAoB,EAApBA,cACnBC,YAAW,WACTL,EAAkB3D,gBAAgB4C,GAClCmB,GAAc,KACb,QAGJ,gBAAGE,EAAH,EAAGA,aAAH,OACC,kBAAC,IAAD,CAAMhD,UAAU,QACd,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UACZgB,EAAW,aAAc,aACzBA,EAAW,WAAY,WAAW,GAClCA,EAAW,QAAS,aACpBA,EAAW,cAAe,cAAc,IAE3C,yBAAKhB,UAAU,UACZsB,MAGL,yBAAKtB,UAAU,aACb,kBAAC,EAAD,CAAcC,OAAO,MAAMF,KAAK,SAASkD,SAAUD,EAAcpD,KAAK,WACtE,kBAAC,EAAD,CACEK,OAAO,MACPC,QAAS,kBAAMI,EAAS,cACxBV,KAAK,iBAzCR,S,GA/BWO,a,QCxCT+C,G,MANA,kBACb,yBAAKlD,UAAU,UACZmD,OCiBUC,MAhBf,WACE,OACE,yBAAKpD,UAAU,OAEb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,UAAd,WACA,uBAAGA,UAAU,SAAb,qCAEF,kBAAC,EAAD,CACExB,QAAS6E,IAAG3E,IAAI,oBAElB,kBAAC,EAAD,QCNc4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS7D,OAAO,kBAAC,EAAD,MAAS8D,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c4b8411f.chunk.js","sourcesContent":["const LocalStorage = require('local-storage');\r\nconst demo = require('../dev/demo.json');\r\n\r\nfunction submitSceneForm(sceneFormInput) {\r\n  console.log('sceneFormInput', sceneFormInput);\r\n  const currentSceneId = sceneFormInput.id;\r\n  const localScenes = LocalStorage.get('scenes');\r\n  const updatedScenes = {\r\n    ...localScenes,\r\n    [currentSceneId]: sceneFormInput\r\n  }\r\n  LocalStorage.set('scenes', updatedScenes);\r\n\r\n  alert(`Submitted scene \"${sceneFormInput.sceneName}\"`);\r\n}\r\n\r\nfunction getScene(sceneId) {\r\n  const localScenes = LocalStorage.get('scenes');\r\n  console.log('scenes:', localScenes);\r\n  console.log('sceneId', sceneId);\r\n  if (!sceneId) {\r\n    return demo.scenes['0'];\r\n  }\r\n  if (localScenes && localScenes[sceneId]) {\r\n    return localScenes[sceneId];\r\n  }\r\n  throw new Error(`Scene '${sceneId}' not found!`);\r\n}\r\n\r\nfunction loadScene(sceneId) {\r\n  const scene = getScene(sceneId);\r\n  LocalStorage.set(\"currentSceneId\", scene.id);\r\n  return scene;\r\n}\r\n\r\nexport default { submitSceneForm, getScene, loadScene };","import React, { Component } from 'react';\r\nimport \"./styles.css\"\r\n\r\nclass SimpleButton extends Component {\r\n  getFontWeight = () => {\r\n    return this.props.text.length === 1 ? \"bold\" : null;\r\n  }\r\n\r\n  render = () => (\r\n    <button\r\n      type={this.props.type || \"button\"}\r\n      className={`button ${this.getFontWeight()} ${this.props.styles}`} onClick={this.props.onClick}\r\n    >\r\n      {this.props.text}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default SimpleButton;","import React, { Component } from 'react';\r\nimport './styles.css';\r\n\r\nclass ErrorBanner extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"ErrorBanner\">{this.props.message}</div>\r\n  )\r\n}\r\n\r\nexport default ErrorBanner;","import FileSaver from 'file-saver';\r\nimport LocalStorage from 'local-storage';\r\n\r\nfunction getBlob(localItemName) {\r\n  const jsonString = JSON.stringify(LocalStorage.get(localItemName), null, 2);\r\n  return new Blob([jsonString], { type: \"text/plain;charset=utf-8\" });\r\n}\r\n\r\nfunction saveFile(fileName) {\r\n  FileSaver.saveAs(getBlob('scenes'), fileName);\r\n}\r\n\r\nexport { saveFile }","import React, { Component } from 'react';\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  // ErrorMessage, \r\n  FieldArray\r\n} from 'formik';\r\nimport LocalStorage from 'local-storage';\r\nimport FormActionHandler from '../../modules/FormActionHandler';\r\nimport SimpleButton from '../SimpleButton';\r\nimport ErrorBanner from '../ErrorBanner';\r\nimport './styles.css';\r\nimport { saveFile } from '../../modules/FileHandler';\r\n\r\nconst buildField = (displayName, fieldName, isTextArea) => (\r\n  <div className=\"namedField\">\r\n    <div>{`${displayName}: `}</div>\r\n    <Field className=\"field\" name={fieldName} component={isTextArea ? 'textarea' : 'input'} />\r\n  </div>\r\n)\r\n\r\nconst buildChoice = (arrayHelpers, index, arrayName) => (\r\n  <div className=\"choice\" key={index}>\r\n    <div className=\"choiceHeader\">\r\n      {`Choice ${index + 1}: `}\r\n      <SimpleButton styles=\"red\" onClick={() => arrayHelpers.remove(index)} text=\"-\" />\r\n    </div>\r\n    {buildField(\"Text\", `${arrayName}.${index}.text`, true)}\r\n    {buildField(\"Next Scene\", `${arrayName}.${index}.nextScene`)}\r\n  </div>\r\n)\r\n\r\nconst buildChoiceArray = () => (\r\n  <FieldArray\r\n    name=\"choices\"\r\n    render={arrayHelpers => (\r\n      <div>\r\n        <div className=\"choicesSectionHeader\">\r\n          <div>Choices</div>\r\n          <SimpleButton onClick={() => arrayHelpers.push({ text: '', nextScene: '' })} text=\"+\" />\r\n        </div>\r\n        {(arrayHelpers.form.values.choices || []).map((field, index) => (\r\n          buildChoice(arrayHelpers, index, \"choices\")\r\n        ))}\r\n      </div>\r\n    )}\r\n  />\r\n)\r\n\r\nclass SceneForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentSceneId: this.props.sceneId,\r\n      initialValues: {},\r\n      loaded: false,\r\n      error: undefined,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    try {\r\n      const scene = FormActionHandler.loadScene(this.state.currentSceneId);\r\n      console.log('scene', scene);\r\n      return this.setState({\r\n        currentSceneId: scene.id,\r\n        initialValues: scene,\r\n        loaded: true\r\n      });\r\n    } catch (error) {\r\n      return this.setState({ error })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      // console.log(this.state.error);\r\n      return <ErrorBanner message={this.state.error.message} />\r\n    }\r\n    if (!this.state.loaded) {\r\n      return null;\r\n    }\r\n    return <div className='formContainer'>\r\n      <Formik\r\n        initialValues={this.state.initialValues}\r\n        //   validate={values => {\r\n        //     let errors = {};\r\n        //     if (!values.email) {\r\n        //       errors.email = 'Required';\r\n        //     } else if (\r\n        //       !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        //     ) {\r\n        //       errors.email = 'Invalid email address';\r\n        //     }\r\n        //     return errors;\r\n        //   }}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            FormActionHandler.submitSceneForm(values);\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form className=\"form\">\r\n            <div className=\"fieldSections\">\r\n              <div className=\"column\">\r\n                {buildField(\"Scene Name\", \"sceneName\")}\r\n                {buildField(\"Top Text\", \"topText\", true)}\r\n                {buildField(\"Image\", \"imageFile\")}\r\n                {buildField(\"Bottom Text\", \"bottomText\", true)}\r\n              </div>\r\n              <div className=\"column\">\r\n                {buildChoiceArray()}\r\n              </div>\r\n            </div>\r\n            <div className=\"row-right\">\r\n              <SimpleButton styles=\"big\" type=\"submit\" disabled={isSubmitting} text=\"Submit\" />\r\n              <SimpleButton\r\n                styles=\"big\"\r\n                onClick={() => saveFile(\"cyoa.json\", \"formInput\")}\r\n                text=\"Export\"\r\n              />\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default SceneForm;","import React from 'react';\r\nimport { version } from '../../../package.json';\r\nimport './styles.css';\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer\">\r\n    {version}\r\n  </div>\r\n)\r\n\r\nexport default Footer","import React from 'react';\r\nimport ls from 'local-storage';\r\nimport './App.css';\r\nimport SceneForm from './components/SceneForm';\r\n// import TopNavBar from './components/TopNavBar';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <TopNavBar/> */}\r\n      <header className=\"App-header\">\r\n        <h1 className=\"App-h1\">Cheddar</h1>\r\n        <p className=\"App-p\">Choose Your Own Adventure Editor</p>\r\n      </header>\r\n      <SceneForm \r\n        sceneId={ls.get(\"currentSceneId\")}\r\n      />\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}